name: AppSec PR Scan

on:
  pull_request:
    branches: [master, main]
  push:
    branches: [master, main]

jobs:
  AppSec_PR_Scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          path: target-repo
          fetch-depth: 0

      - name: Checkout Scanner Repository  
        uses: actions/checkout@v4
        with:
          repository: cparnin/appsec_scanner
          path: scanner

      - name: Install Python & Dependencies
        run: |
          pip install semgrep openai requests jinja2 python-dotenv pathlib

      - name: Install Gitleaks using official action
        uses: gacts/gitleaks@v1
        with:
          version: latest
          path: target-repo
          run: false
        id: gitleaks_install

      - name: Install Trivy using official action
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'fs'
          scan-ref: 'target-repo'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '0'
          skip-setup-trivy: false
        id: trivy_install

      - name: Verify Tool Installations
        run: |
          echo "Gitleaks binary path: ${{ steps.gitleaks_install.outputs.gitleaks-bin }}"
          ${{ steps.gitleaks_install.outputs.gitleaks-bin }} version
          echo "Trivy results: trivy-results.json"
          ls -la trivy-results.json

      - name: Run AppSec Scanner
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITLEAKS_BIN: ${{ steps.gitleaks_install.outputs.gitleaks-bin }}
        run: |
          cd scanner/src
          # Copy Trivy results to expected location within scanner directory
          mkdir -p ../outputs/raw
          cp ../../trivy-results.json ../outputs/raw/
          # Run scanner with output to scanner/outputs (not ../../outputs)
          python cli.py --repo ../../target-repo --scan all --output ../outputs
        continue-on-error: true

      - name: Debug Output
        run: |
          echo "=== Current Directory ==="
          pwd
          echo "=== All Files ==="
          ls -la
          echo "=== Scanner Outputs (Checking both locations) ==="
          if [ -d scanner/outputs ]; then
            echo "Found scanner/outputs directory"
            ls -la scanner/outputs/
            if [ -d scanner/outputs/raw ]; then
              echo "Raw scanner files:"
              ls -la scanner/outputs/raw/
            fi
          else
            echo "No scanner/outputs directory found"
          fi
          
          if [ -d outputs ]; then
            echo "Found outputs directory"
            ls -la outputs/
            if [ -d outputs/raw ]; then
              echo "Raw scanner files:"
              ls -la outputs/raw/
              echo "=== Scanner Result Summary ==="
              if [ -f outputs/raw/semgrep.json ]; then
                echo "Semgrep results: $(wc -l < outputs/raw/semgrep.json) lines"
              fi
              if [ -f outputs/raw/gitleaks.json ]; then
                echo "Gitleaks results: $(wc -l < outputs/raw/gitleaks.json) lines"
              fi
              if [ -f outputs/raw/trivy-sca.json ]; then
                echo "Trivy results: $(wc -l < outputs/raw/trivy-sca.json) lines"
              fi
            fi
          else
            echo "No outputs directory found"
          fi

      - name: Prepare PR Comment
        run: |
          # Create outputs directory and copy scanner results
          mkdir -p outputs
          if [ -f scanner/outputs/pr-findings.txt ] && [ -s scanner/outputs/pr-findings.txt ]; then
            echo "Using scanner pr-findings.txt"
            cp scanner/outputs/pr-findings.txt outputs/
            echo "File size: $(wc -c < outputs/pr-findings.txt) bytes"
            echo "Line count: $(wc -l < outputs/pr-findings.txt) lines"
          else
            echo "Creating fallback pr-findings.txt (scanner output not found or empty)"
            echo "Checking what we have:"
            echo "scanner/outputs/ contents:"
            ls -la scanner/outputs/ 2>/dev/null || echo "No scanner/outputs directory"
            if [ -d scanner/outputs/raw ]; then
              echo "Raw files found:"
              ls -la scanner/outputs/raw/
            fi
            cat > outputs/pr-findings.txt << 'EOFMARKER'
          ## Security Scan Results
          
          The AppSec Scanner has completed its analysis of this repository.
          
          ### Scanner Status
          - Semgrep SAST Analysis
          - Gitleaks Secret Detection  
          - Trivy SCA Analysis
          
          Detailed reports have been generated and are available in the workflow artifacts.
          
          ### Next Steps
          1. Review the findings in the detailed reports
          2. Implement the AI-generated remediation suggestions  
          3. Re-run the scanner to verify fixes
          
          Powered by AppSec Scanner
          EOFMARKER
          fi
          echo "Final pr-findings.txt content:"
          cat outputs/pr-findings.txt

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: outputs/pr-findings.txt
          # NOTE: This action UPDATES the same comment each time (prevents spam)
          # If you want separate comments for each run, use this instead:
          # uses: actions/github-script@v6
          # with:
          #   script: |
          #     const fs = require('fs');
          #     const comment = fs.readFileSync('outputs/pr-findings.txt', 'utf8');
          #     github.rest.issues.createComment({
          #       issue_number: context.issue.number,
          #       owner: context.repo.owner,
          #       repo: context.repo.repo,
          #       body: comment
          #     });
